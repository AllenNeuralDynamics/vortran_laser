"""Stradus Laser Driver."""

from enum import Enum
from serial import Serial, EIGHTBITS, STOPBITS_ONE, PARITY_NONE


COM_SETUP = \
{
    "baudrate": 19200,
    "bytesize": EIGHTBITS,
    "parity": PARITY_NONE,
    "stopbits": STOPBITS_ONE,
    "xonxoff": False,
    "timeout": 0.25
}


class Cmd(Enum):
    Echo = "ECHO"
    Prompt = "PROMPT"

    LaserDriverControlMode = "C"
    FiveSecEmissionDelay = "DELAY"
    ExternalPowerControl = "EXP"
    LaserCurrentControl = "LC"
    LaserEmission = "LE"
    LaserPower = "LP"
    PulsePower = "PP"
    PulseMode = "PM"


#C=[0/1] - Set laser Drive Control Mode: Power/Current
#CFC - Clear Stored Fault Codes
#DELAY=[0/1] - Set 5 Second CDRH Delay: Off/on
#ECHO=[0/1] - Toggle Terminal Echo: Off/On
#EPC=[0/1] - Set External Power Control Off/On
#LC=###.# - Set Laser Current: mA
#LE=[0/1] - Toggle Laser Emission Off/On
#LP=###.# - Set Laser Power: mW
#PROMPT=[0/1] - Toggle Terminal Prompt: Off/On
#RFC - Recall Stored Fault Codes
#PP=[0-1000] - Set Peak Pulse Power in Mw
#PUL=[0/1] - Set Pulse Mode
#TEC=[0/1] - Toggle TE Cooler: Off/On


class Query(Enum):
    BasePlateTemperature = "?BPT"
    Help = "?H"
    InterlockStatus = "?IL"
    SystemFirmwareVersion = "?SFV"
    SystemFirmwareProtocolVersion = "?SPV"

    LaserDriverControlMode = "?C"  # request laser drive control status
    ComputerControl = "?CC"  # request computer control status
    FiveSecEmissionDelay = "?DELAY"  # Request 5-second CDRH Delay status
    ExternalPowerControl = "?EPC"  # Request external power control
    FaultCode = "?FC"  # Request fault code and clear faults
    FaultDescription = "?FD"  # Request fault description.
    FirmwareProtocol = "?FP"  # 
    FirmwareVersion = "?FV"
    LaserCurrent = "?LC"
    LaserCurrentSetting = "?LCS"
    LaserEmission = "?LE"
    LaserOperatingHourse = "?LH"
    LaserIdentification = "?LI"
    LaserPower = "?LP"  # measured laser power
    LaserPowerSetting = "?LPS" # desired laser power setpoint.
    LaserWavelength = "?LW"
    MaximumLaserPower = "?MAXP"
    OpticalBlockTemperature = "?OBT"
    OpticalBlockTemperatureSetting = "?OBTS"
    PulsePower = "?PP"
    PulseMode = "?PUL"
    RatedPower = "?RP"

# ?C -  Request Laser Drive Control Status
# ?CC - Request Computer Control Status
# ?DELAY - Request 5 Second CDRH Delay Status
# ?ECHO - Request Echo Status
# ?EPC - Request External Power Status
# ?FC - Request Fault Code, and clear faults
# ?FD - Request Fault Description
# ?FP - Request Protocol Version
# ?FV - Request Firmware Version
# ?H - Request Help File
# ?IL - Request Interlock Status
# ?LC - Request Laser Current
# ?LCS - Request Laser Current Settings
# ?LE - Request Laser Emission Status
# ?LH - Request Laser Operating Hours
# ?LI - Request Laser Identification
# ?LP - Request Laser Power mW
# ?LPS - Request Laser Power Setting
# ?LS - Request Laser Status
# ?LW - Request Laser Wavelength
# ?MAXP - Request Maximum Laser Power
# ?OBT - Request Optical Block Temperature
# ?OBTS - Request Optical Block Temperature Setting
# ?RP - Request Rated Laser Power
# ?PP - Request Peak Pulse Power
# ?PUL - Request Pulse Mode
# ?TEC - Request TE Cooler/Heater Status

# A subset of the above queries are also commands if used without the '?'.
# Use Enum's Functional API to create the commands.


class StradusLaser:

    REPLY_TERMINATION = b'\r\n'

    def __init__(self, port: str = "/dev/ttyUSB0"):
        self.ser = Serial(port, **COM_SETUP)
        self.disable_echo()
        self.disable_prompt()


    def disable_echo(self):
        return self.set(Cmd.Echo, 0)

    def disable_prompt(self):
        return self.set(Cmd.Prompt, 0)

    def clear_faults(self):
        pass

    # Low level.
    def get(self, setting: Query):
        """Request a setting from the device."""
        return self._send(setting.value)

    def set(self, cmd: Cmd, value: str):
        return self._send(f"{cmd}={value}")

    def _send(self, msg: str):
        self.ser.write(f"{msg}\r".encode('ascii'))
        #reply = self.ser.read_until(StradusLaser.REPLY_TERMINATION)
        reply = self.ser.read(100)
        print(f"got: {reply}")
        print()
        return# reply.rstrip(StradusLaser.REPLY_TERMINATION).decode('utf-8')


if __name__ == "__main__":

    from inpromptu import Inpromptu
    laserui = Inpromptu(StradusLaser('/dev/ttyUSB0'))
    laserui.cmdloop()
